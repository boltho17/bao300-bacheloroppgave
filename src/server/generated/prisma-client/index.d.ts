// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  country: (where?: CountryWhereInput) => Promise<boolean>;
  customer: (where?: CustomerWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  productImage: (where?: ProductImageWhereInput) => Promise<boolean>;
  region: (where?: RegionWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vendor: (where?: VendorWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  country: (where: CountryWhereUniqueInput) => CountryNullablePromise;
  countries: (args?: {
    where?: CountryWhereInput;
    orderBy?: CountryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Country>;
  countriesConnection: (args?: {
    where?: CountryWhereInput;
    orderBy?: CountryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CountryConnectionPromise;
  customer: (where: CustomerWhereUniqueInput) => CustomerNullablePromise;
  customers: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Customer>;
  customersConnection: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CustomerConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  productImage: (
    where: ProductImageWhereUniqueInput
  ) => ProductImageNullablePromise;
  productImages: (args?: {
    where?: ProductImageWhereInput;
    orderBy?: ProductImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProductImage>;
  productImagesConnection: (args?: {
    where?: ProductImageWhereInput;
    orderBy?: ProductImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductImageConnectionPromise;
  region: (where: RegionWhereUniqueInput) => RegionNullablePromise;
  regions: (args?: {
    where?: RegionWhereInput;
    orderBy?: RegionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Region>;
  regionsConnection: (args?: {
    where?: RegionWhereInput;
    orderBy?: RegionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RegionConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  vendor: (where: VendorWhereUniqueInput) => VendorNullablePromise;
  vendors: (args?: {
    where?: VendorWhereInput;
    orderBy?: VendorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vendor>;
  vendorsConnection: (args?: {
    where?: VendorWhereInput;
    orderBy?: VendorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VendorConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCountry: (data: CountryCreateInput) => CountryPromise;
  updateCountry: (args: {
    data: CountryUpdateInput;
    where: CountryWhereUniqueInput;
  }) => CountryPromise;
  updateManyCountries: (args: {
    data: CountryUpdateManyMutationInput;
    where?: CountryWhereInput;
  }) => BatchPayloadPromise;
  upsertCountry: (args: {
    where: CountryWhereUniqueInput;
    create: CountryCreateInput;
    update: CountryUpdateInput;
  }) => CountryPromise;
  deleteCountry: (where: CountryWhereUniqueInput) => CountryPromise;
  deleteManyCountries: (where?: CountryWhereInput) => BatchPayloadPromise;
  createCustomer: (data: CustomerCreateInput) => CustomerPromise;
  updateCustomer: (args: {
    data: CustomerUpdateInput;
    where: CustomerWhereUniqueInput;
  }) => CustomerPromise;
  updateManyCustomers: (args: {
    data: CustomerUpdateManyMutationInput;
    where?: CustomerWhereInput;
  }) => BatchPayloadPromise;
  upsertCustomer: (args: {
    where: CustomerWhereUniqueInput;
    create: CustomerCreateInput;
    update: CustomerUpdateInput;
  }) => CustomerPromise;
  deleteCustomer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  deleteManyCustomers: (where?: CustomerWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createProductImage: (data: ProductImageCreateInput) => ProductImagePromise;
  updateProductImage: (args: {
    data: ProductImageUpdateInput;
    where: ProductImageWhereUniqueInput;
  }) => ProductImagePromise;
  updateManyProductImages: (args: {
    data: ProductImageUpdateManyMutationInput;
    where?: ProductImageWhereInput;
  }) => BatchPayloadPromise;
  upsertProductImage: (args: {
    where: ProductImageWhereUniqueInput;
    create: ProductImageCreateInput;
    update: ProductImageUpdateInput;
  }) => ProductImagePromise;
  deleteProductImage: (
    where: ProductImageWhereUniqueInput
  ) => ProductImagePromise;
  deleteManyProductImages: (
    where?: ProductImageWhereInput
  ) => BatchPayloadPromise;
  createRegion: (data: RegionCreateInput) => RegionPromise;
  updateRegion: (args: {
    data: RegionUpdateInput;
    where: RegionWhereUniqueInput;
  }) => RegionPromise;
  updateManyRegions: (args: {
    data: RegionUpdateManyMutationInput;
    where?: RegionWhereInput;
  }) => BatchPayloadPromise;
  upsertRegion: (args: {
    where: RegionWhereUniqueInput;
    create: RegionCreateInput;
    update: RegionUpdateInput;
  }) => RegionPromise;
  deleteRegion: (where: RegionWhereUniqueInput) => RegionPromise;
  deleteManyRegions: (where?: RegionWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVendor: (data: VendorCreateInput) => VendorPromise;
  updateVendor: (args: {
    data: VendorUpdateInput;
    where: VendorWhereUniqueInput;
  }) => VendorPromise;
  updateManyVendors: (args: {
    data: VendorUpdateManyMutationInput;
    where?: VendorWhereInput;
  }) => BatchPayloadPromise;
  upsertVendor: (args: {
    where: VendorWhereUniqueInput;
    create: VendorCreateInput;
    update: VendorUpdateInput;
  }) => VendorPromise;
  deleteVendor: (where: VendorWhereUniqueInput) => VendorPromise;
  deleteManyVendors: (where?: VendorWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  country: (
    where?: CountrySubscriptionWhereInput
  ) => CountrySubscriptionPayloadSubscription;
  customer: (
    where?: CustomerSubscriptionWhereInput
  ) => CustomerSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  productImage: (
    where?: ProductImageSubscriptionWhereInput
  ) => ProductImageSubscriptionPayloadSubscription;
  region: (
    where?: RegionSubscriptionWhereInput
  ) => RegionSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vendor: (
    where?: VendorSubscriptionWhereInput
  ) => VendorSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CountryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "flavorProfile_ASC"
  | "flavorProfile_DESC"
  | "description_ASC"
  | "description_DESC"
  | "info_ASC"
  | "info_DESC"
  | "published_ASC"
  | "published_DESC";

export type ProductImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "image_ASC"
  | "image_DESC";

export type CustomerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "address_ASC"
  | "address_DESC";

export type RegionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC";

export type VendorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "displayName_ASC"
  | "displayName_DESC"
  | "organizationNumber_ASC"
  | "organizationNumber_DESC"
  | "bankAccount_ASC"
  | "bankAccount_DESC"
  | "logoImage_ASC"
  | "logoImage_DESC"
  | "facebookPageURL_ASC"
  | "facebookPageURL_DESC"
  | "address_ASC"
  | "address_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ProductImageUpdateWithoutProductDataInput {
  image?: Maybe<String>;
}

export type CountryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface CountryUpdateInput {
  name?: Maybe<String>;
  region?: Maybe<RegionUpdateOneWithoutCountriesInput>;
  products?: Maybe<ProductUpdateManyWithoutCountryInput>;
}

export interface ProductUpdateManyMutationInput {
  title?: Maybe<String>;
  flavorProfile?: Maybe<String>;
  description?: Maybe<String>;
  info?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface RegionUpdateOneWithoutCountriesInput {
  create?: Maybe<RegionCreateWithoutCountriesInput>;
  update?: Maybe<RegionUpdateWithoutCountriesDataInput>;
  upsert?: Maybe<RegionUpsertWithoutCountriesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<RegionWhereUniqueInput>;
}

export interface ProductUpsertWithWhereUniqueWithoutCountryInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutCountryDataInput;
  create: ProductCreateWithoutCountryInput;
}

export interface RegionUpdateWithoutCountriesDataInput {
  name?: Maybe<String>;
}

export interface ProductImageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  product?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductImageWhereInput[] | ProductImageWhereInput>;
  OR?: Maybe<ProductImageWhereInput[] | ProductImageWhereInput>;
  NOT?: Maybe<ProductImageWhereInput[] | ProductImageWhereInput>;
}

export interface RegionUpsertWithoutCountriesInput {
  update: RegionUpdateWithoutCountriesDataInput;
  create: RegionCreateWithoutCountriesInput;
}

export interface VendorSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VendorWhereInput>;
  AND?: Maybe<VendorSubscriptionWhereInput[] | VendorSubscriptionWhereInput>;
  OR?: Maybe<VendorSubscriptionWhereInput[] | VendorSubscriptionWhereInput>;
  NOT?: Maybe<VendorSubscriptionWhereInput[] | VendorSubscriptionWhereInput>;
}

export interface ProductUpdateManyWithoutCountryInput {
  create?: Maybe<
    ProductCreateWithoutCountryInput[] | ProductCreateWithoutCountryInput
  >;
  delete?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  set?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  disconnect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  update?: Maybe<
    | ProductUpdateWithWhereUniqueWithoutCountryInput[]
    | ProductUpdateWithWhereUniqueWithoutCountryInput
  >;
  upsert?: Maybe<
    | ProductUpsertWithWhereUniqueWithoutCountryInput[]
    | ProductUpsertWithWhereUniqueWithoutCountryInput
  >;
  deleteMany?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  updateMany?: Maybe<
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput
  >;
}

export interface RegionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RegionWhereInput>;
  AND?: Maybe<RegionSubscriptionWhereInput[] | RegionSubscriptionWhereInput>;
  OR?: Maybe<RegionSubscriptionWhereInput[] | RegionSubscriptionWhereInput>;
  NOT?: Maybe<RegionSubscriptionWhereInput[] | RegionSubscriptionWhereInput>;
}

export interface ProductUpdateWithWhereUniqueWithoutCountryInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutCountryDataInput;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface ProductUpdateWithoutCountryDataInput {
  title?: Maybe<String>;
  flavorProfile?: Maybe<String>;
  description?: Maybe<String>;
  info?: Maybe<String>;
  published?: Maybe<Boolean>;
  vendor?: Maybe<VendorUpdateOneWithoutProductsInput>;
  productImages?: Maybe<ProductImageUpdateManyWithoutProductInput>;
}

export interface CustomerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CustomerWhereInput>;
  AND?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
  OR?: Maybe<CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput>;
  NOT?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
}

export interface VendorUpdateOneWithoutProductsInput {
  create?: Maybe<VendorCreateWithoutProductsInput>;
  update?: Maybe<VendorUpdateWithoutProductsDataInput>;
  upsert?: Maybe<VendorUpsertWithoutProductsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<VendorWhereUniqueInput>;
}

export interface VendorUpdateManyMutationInput {
  displayName?: Maybe<String>;
  organizationNumber?: Maybe<Int>;
  bankAccount?: Maybe<String>;
  logoImage?: Maybe<String>;
  facebookPageURL?: Maybe<String>;
  address?: Maybe<String>;
}

export interface VendorUpdateWithoutProductsDataInput {
  displayName?: Maybe<String>;
  organizationNumber?: Maybe<Int>;
  bankAccount?: Maybe<String>;
  logoImage?: Maybe<String>;
  facebookPageURL?: Maybe<String>;
  address?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutVendorInput>;
}

export interface VendorCreateInput {
  id?: Maybe<ID_Input>;
  displayName: String;
  organizationNumber: Int;
  bankAccount: String;
  logoImage: String;
  facebookPageURL?: Maybe<String>;
  address: String;
  user: UserCreateOneWithoutVendorInput;
  products?: Maybe<ProductCreateManyWithoutVendorInput>;
}

export interface UserUpdateOneRequiredWithoutVendorInput {
  create?: Maybe<UserCreateWithoutVendorInput>;
  update?: Maybe<UserUpdateWithoutVendorDataInput>;
  upsert?: Maybe<UserUpsertWithoutVendorInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface RegionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  countries_every?: Maybe<CountryWhereInput>;
  countries_some?: Maybe<CountryWhereInput>;
  countries_none?: Maybe<CountryWhereInput>;
  AND?: Maybe<RegionWhereInput[] | RegionWhereInput>;
  OR?: Maybe<RegionWhereInput[] | RegionWhereInput>;
  NOT?: Maybe<RegionWhereInput[] | RegionWhereInput>;
}

export interface UserUpdateWithoutVendorDataInput {
  email?: Maybe<String>;
  phone?: Maybe<Int>;
  customer?: Maybe<CustomerUpdateOneWithoutUserInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  phone?: Maybe<Int>;
  customer?: Maybe<CustomerUpdateOneWithoutUserInput>;
  vendor?: Maybe<VendorUpdateOneWithoutUserInput>;
}

export interface CustomerUpdateOneWithoutUserInput {
  create?: Maybe<CustomerCreateWithoutUserInput>;
  update?: Maybe<CustomerUpdateWithoutUserDataInput>;
  upsert?: Maybe<CustomerUpsertWithoutUserInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CustomerUpdateWithoutUserDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  address?: Maybe<String>;
}

export interface CountryUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface CustomerUpsertWithoutUserInput {
  update: CustomerUpdateWithoutUserDataInput;
  create: CustomerCreateWithoutUserInput;
}

export type ProductImageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpsertWithoutVendorInput {
  update: UserUpdateWithoutVendorDataInput;
  create: UserCreateWithoutVendorInput;
}

export interface CountryUpsertWithWhereUniqueWithoutRegionInput {
  where: CountryWhereUniqueInput;
  update: CountryUpdateWithoutRegionDataInput;
  create: CountryCreateWithoutRegionInput;
}

export interface VendorUpsertWithoutProductsInput {
  update: VendorUpdateWithoutProductsDataInput;
  create: VendorCreateWithoutProductsInput;
}

export type RegionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface ProductImageUpdateManyWithoutProductInput {
  create?: Maybe<
    | ProductImageCreateWithoutProductInput[]
    | ProductImageCreateWithoutProductInput
  >;
  delete?: Maybe<ProductImageWhereUniqueInput[] | ProductImageWhereUniqueInput>;
  connect?: Maybe<
    ProductImageWhereUniqueInput[] | ProductImageWhereUniqueInput
  >;
  set?: Maybe<ProductImageWhereUniqueInput[] | ProductImageWhereUniqueInput>;
  disconnect?: Maybe<
    ProductImageWhereUniqueInput[] | ProductImageWhereUniqueInput
  >;
  update?: Maybe<
    | ProductImageUpdateWithWhereUniqueWithoutProductInput[]
    | ProductImageUpdateWithWhereUniqueWithoutProductInput
  >;
  upsert?: Maybe<
    | ProductImageUpsertWithWhereUniqueWithoutProductInput[]
    | ProductImageUpsertWithWhereUniqueWithoutProductInput
  >;
  deleteMany?: Maybe<
    ProductImageScalarWhereInput[] | ProductImageScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProductImageUpdateManyWithWhereNestedInput[]
    | ProductImageUpdateManyWithWhereNestedInput
  >;
}

export interface CountryUpdateWithWhereUniqueWithoutRegionInput {
  where: CountryWhereUniqueInput;
  data: CountryUpdateWithoutRegionDataInput;
}

export interface ProductImageUpdateWithWhereUniqueWithoutProductInput {
  where: ProductImageWhereUniqueInput;
  data: ProductImageUpdateWithoutProductDataInput;
}

export interface RegionUpdateInput {
  name?: Maybe<String>;
  countries?: Maybe<CountryUpdateManyWithoutRegionInput>;
}

export interface ProductCreateWithoutProductImagesInput {
  id?: Maybe<ID_Input>;
  title: String;
  flavorProfile?: Maybe<String>;
  description: String;
  info?: Maybe<String>;
  published: Boolean;
  vendor?: Maybe<VendorCreateOneWithoutProductsInput>;
  country?: Maybe<CountryCreateOneWithoutProductsInput>;
}

export interface CountryCreateWithoutRegionInput {
  id?: Maybe<ID_Input>;
  name: String;
  products?: Maybe<ProductCreateManyWithoutCountryInput>;
}

export interface ProductImageUpsertWithWhereUniqueWithoutProductInput {
  where: ProductImageWhereUniqueInput;
  update: ProductImageUpdateWithoutProductDataInput;
  create: ProductImageCreateWithoutProductInput;
}

export interface RegionCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  countries?: Maybe<CountryCreateManyWithoutRegionInput>;
}

export interface ProductImageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProductImageScalarWhereInput[] | ProductImageScalarWhereInput>;
  OR?: Maybe<ProductImageScalarWhereInput[] | ProductImageScalarWhereInput>;
  NOT?: Maybe<ProductImageScalarWhereInput[] | ProductImageScalarWhereInput>;
}

export type VendorWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  organizationNumber?: Maybe<Int>;
  bankAccount?: Maybe<String>;
}>;

export interface ProductImageUpdateManyWithWhereNestedInput {
  where: ProductImageScalarWhereInput;
  data: ProductImageUpdateManyDataInput;
}

export interface ProductUpdateWithoutProductImagesDataInput {
  title?: Maybe<String>;
  flavorProfile?: Maybe<String>;
  description?: Maybe<String>;
  info?: Maybe<String>;
  published?: Maybe<Boolean>;
  vendor?: Maybe<VendorUpdateOneWithoutProductsInput>;
  country?: Maybe<CountryUpdateOneWithoutProductsInput>;
}

export interface ProductImageUpdateManyDataInput {
  image?: Maybe<String>;
}

export interface ProductImageUpdateInput {
  image?: Maybe<String>;
  product?: Maybe<ProductUpdateOneWithoutProductImagesInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<Int>;
  phone_not?: Maybe<Int>;
  phone_in?: Maybe<Int[] | Int>;
  phone_not_in?: Maybe<Int[] | Int>;
  phone_lt?: Maybe<Int>;
  phone_lte?: Maybe<Int>;
  phone_gt?: Maybe<Int>;
  phone_gte?: Maybe<Int>;
  customer?: Maybe<CustomerWhereInput>;
  vendor?: Maybe<VendorWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CountryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  region?: Maybe<RegionCreateOneWithoutCountriesInput>;
  products?: Maybe<ProductCreateManyWithoutCountryInput>;
}

export interface ProductScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  flavorProfile?: Maybe<String>;
  flavorProfile_not?: Maybe<String>;
  flavorProfile_in?: Maybe<String[] | String>;
  flavorProfile_not_in?: Maybe<String[] | String>;
  flavorProfile_lt?: Maybe<String>;
  flavorProfile_lte?: Maybe<String>;
  flavorProfile_gt?: Maybe<String>;
  flavorProfile_gte?: Maybe<String>;
  flavorProfile_contains?: Maybe<String>;
  flavorProfile_not_contains?: Maybe<String>;
  flavorProfile_starts_with?: Maybe<String>;
  flavorProfile_not_starts_with?: Maybe<String>;
  flavorProfile_ends_with?: Maybe<String>;
  flavorProfile_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  info?: Maybe<String>;
  info_not?: Maybe<String>;
  info_in?: Maybe<String[] | String>;
  info_not_in?: Maybe<String[] | String>;
  info_lt?: Maybe<String>;
  info_lte?: Maybe<String>;
  info_gt?: Maybe<String>;
  info_gte?: Maybe<String>;
  info_contains?: Maybe<String>;
  info_not_contains?: Maybe<String>;
  info_starts_with?: Maybe<String>;
  info_not_starts_with?: Maybe<String>;
  info_ends_with?: Maybe<String>;
  info_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  AND?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  OR?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  NOT?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
}

export interface RegionCreateWithoutCountriesInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput;
  data: ProductUpdateManyDataInput;
}

export interface ProductCreateWithoutCountryInput {
  id?: Maybe<ID_Input>;
  title: String;
  flavorProfile?: Maybe<String>;
  description: String;
  info?: Maybe<String>;
  published: Boolean;
  vendor?: Maybe<VendorCreateOneWithoutProductsInput>;
  productImages?: Maybe<ProductImageCreateManyWithoutProductInput>;
}

export interface ProductUpdateManyDataInput {
  title?: Maybe<String>;
  flavorProfile?: Maybe<String>;
  description?: Maybe<String>;
  info?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface VendorCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  displayName: String;
  organizationNumber: Int;
  bankAccount: String;
  logoImage: String;
  facebookPageURL?: Maybe<String>;
  address: String;
  user: UserCreateOneWithoutVendorInput;
}

export interface CountryUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserCreateWithoutVendorInput {
  id?: Maybe<ID_Input>;
  email: String;
  phone?: Maybe<Int>;
  customer?: Maybe<CustomerCreateOneWithoutUserInput>;
}

export interface ProductCreateOneWithoutProductImagesInput {
  create?: Maybe<ProductCreateWithoutProductImagesInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface CustomerCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  address: String;
}

export interface ProductImageCreateInput {
  id?: Maybe<ID_Input>;
  image: String;
  product?: Maybe<ProductCreateOneWithoutProductImagesInput>;
}

export interface ProductImageCreateWithoutProductInput {
  id?: Maybe<ID_Input>;
  image: String;
}

export interface CustomerCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  address: String;
  user: UserCreateOneWithoutCustomerInput;
}

export interface VendorWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  displayName?: Maybe<String>;
  displayName_not?: Maybe<String>;
  displayName_in?: Maybe<String[] | String>;
  displayName_not_in?: Maybe<String[] | String>;
  displayName_lt?: Maybe<String>;
  displayName_lte?: Maybe<String>;
  displayName_gt?: Maybe<String>;
  displayName_gte?: Maybe<String>;
  displayName_contains?: Maybe<String>;
  displayName_not_contains?: Maybe<String>;
  displayName_starts_with?: Maybe<String>;
  displayName_not_starts_with?: Maybe<String>;
  displayName_ends_with?: Maybe<String>;
  displayName_not_ends_with?: Maybe<String>;
  organizationNumber?: Maybe<Int>;
  organizationNumber_not?: Maybe<Int>;
  organizationNumber_in?: Maybe<Int[] | Int>;
  organizationNumber_not_in?: Maybe<Int[] | Int>;
  organizationNumber_lt?: Maybe<Int>;
  organizationNumber_lte?: Maybe<Int>;
  organizationNumber_gt?: Maybe<Int>;
  organizationNumber_gte?: Maybe<Int>;
  bankAccount?: Maybe<String>;
  bankAccount_not?: Maybe<String>;
  bankAccount_in?: Maybe<String[] | String>;
  bankAccount_not_in?: Maybe<String[] | String>;
  bankAccount_lt?: Maybe<String>;
  bankAccount_lte?: Maybe<String>;
  bankAccount_gt?: Maybe<String>;
  bankAccount_gte?: Maybe<String>;
  bankAccount_contains?: Maybe<String>;
  bankAccount_not_contains?: Maybe<String>;
  bankAccount_starts_with?: Maybe<String>;
  bankAccount_not_starts_with?: Maybe<String>;
  bankAccount_ends_with?: Maybe<String>;
  bankAccount_not_ends_with?: Maybe<String>;
  logoImage?: Maybe<String>;
  logoImage_not?: Maybe<String>;
  logoImage_in?: Maybe<String[] | String>;
  logoImage_not_in?: Maybe<String[] | String>;
  logoImage_lt?: Maybe<String>;
  logoImage_lte?: Maybe<String>;
  logoImage_gt?: Maybe<String>;
  logoImage_gte?: Maybe<String>;
  logoImage_contains?: Maybe<String>;
  logoImage_not_contains?: Maybe<String>;
  logoImage_starts_with?: Maybe<String>;
  logoImage_not_starts_with?: Maybe<String>;
  logoImage_ends_with?: Maybe<String>;
  logoImage_not_ends_with?: Maybe<String>;
  facebookPageURL?: Maybe<String>;
  facebookPageURL_not?: Maybe<String>;
  facebookPageURL_in?: Maybe<String[] | String>;
  facebookPageURL_not_in?: Maybe<String[] | String>;
  facebookPageURL_lt?: Maybe<String>;
  facebookPageURL_lte?: Maybe<String>;
  facebookPageURL_gt?: Maybe<String>;
  facebookPageURL_gte?: Maybe<String>;
  facebookPageURL_contains?: Maybe<String>;
  facebookPageURL_not_contains?: Maybe<String>;
  facebookPageURL_starts_with?: Maybe<String>;
  facebookPageURL_not_starts_with?: Maybe<String>;
  facebookPageURL_ends_with?: Maybe<String>;
  facebookPageURL_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  products_every?: Maybe<ProductWhereInput>;
  products_some?: Maybe<ProductWhereInput>;
  products_none?: Maybe<ProductWhereInput>;
  AND?: Maybe<VendorWhereInput[] | VendorWhereInput>;
  OR?: Maybe<VendorWhereInput[] | VendorWhereInput>;
  NOT?: Maybe<VendorWhereInput[] | VendorWhereInput>;
}

export interface UserCreateOneWithoutCustomerInput {
  create?: Maybe<UserCreateWithoutCustomerInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ProductImageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductImageWhereInput>;
  AND?: Maybe<
    ProductImageSubscriptionWhereInput[] | ProductImageSubscriptionWhereInput
  >;
  OR?: Maybe<
    ProductImageSubscriptionWhereInput[] | ProductImageSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ProductImageSubscriptionWhereInput[] | ProductImageSubscriptionWhereInput
  >;
}

export interface UserCreateWithoutCustomerInput {
  id?: Maybe<ID_Input>;
  email: String;
  phone?: Maybe<Int>;
  vendor?: Maybe<VendorCreateOneWithoutUserInput>;
}

export interface CountrySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CountryWhereInput>;
  AND?: Maybe<CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput>;
  OR?: Maybe<CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput>;
  NOT?: Maybe<CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput>;
}

export interface VendorCreateOneWithoutUserInput {
  create?: Maybe<VendorCreateWithoutUserInput>;
  connect?: Maybe<VendorWhereUniqueInput>;
}

export type CustomerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface VendorCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  displayName: String;
  organizationNumber: Int;
  bankAccount: String;
  logoImage: String;
  facebookPageURL?: Maybe<String>;
  address: String;
  products?: Maybe<ProductCreateManyWithoutVendorInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  phone?: Maybe<Int>;
  customer?: Maybe<CustomerCreateOneWithoutUserInput>;
  vendor?: Maybe<VendorCreateOneWithoutUserInput>;
}

export interface ProductCreateManyWithoutVendorInput {
  create?: Maybe<
    ProductCreateWithoutVendorInput[] | ProductCreateWithoutVendorInput
  >;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
}

export interface CountryUpdateManyWithWhereNestedInput {
  where: CountryScalarWhereInput;
  data: CountryUpdateManyDataInput;
}

export interface ProductCreateWithoutVendorInput {
  id?: Maybe<ID_Input>;
  title: String;
  flavorProfile?: Maybe<String>;
  description: String;
  info?: Maybe<String>;
  published: Boolean;
  country?: Maybe<CountryCreateOneWithoutProductsInput>;
  productImages?: Maybe<ProductImageCreateManyWithoutProductInput>;
}

export interface CountryUpdateWithoutRegionDataInput {
  name?: Maybe<String>;
  products?: Maybe<ProductUpdateManyWithoutCountryInput>;
}

export interface CountryCreateOneWithoutProductsInput {
  create?: Maybe<CountryCreateWithoutProductsInput>;
  connect?: Maybe<CountryWhereUniqueInput>;
}

export interface CountryUpdateManyWithoutRegionInput {
  create?: Maybe<
    CountryCreateWithoutRegionInput[] | CountryCreateWithoutRegionInput
  >;
  delete?: Maybe<CountryWhereUniqueInput[] | CountryWhereUniqueInput>;
  connect?: Maybe<CountryWhereUniqueInput[] | CountryWhereUniqueInput>;
  set?: Maybe<CountryWhereUniqueInput[] | CountryWhereUniqueInput>;
  disconnect?: Maybe<CountryWhereUniqueInput[] | CountryWhereUniqueInput>;
  update?: Maybe<
    | CountryUpdateWithWhereUniqueWithoutRegionInput[]
    | CountryUpdateWithWhereUniqueWithoutRegionInput
  >;
  upsert?: Maybe<
    | CountryUpsertWithWhereUniqueWithoutRegionInput[]
    | CountryUpsertWithWhereUniqueWithoutRegionInput
  >;
  deleteMany?: Maybe<CountryScalarWhereInput[] | CountryScalarWhereInput>;
  updateMany?: Maybe<
    | CountryUpdateManyWithWhereNestedInput[]
    | CountryUpdateManyWithWhereNestedInput
  >;
}

export interface CountryCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  name: String;
  region?: Maybe<RegionCreateOneWithoutCountriesInput>;
}

export interface CountryCreateManyWithoutRegionInput {
  create?: Maybe<
    CountryCreateWithoutRegionInput[] | CountryCreateWithoutRegionInput
  >;
  connect?: Maybe<CountryWhereUniqueInput[] | CountryWhereUniqueInput>;
}

export interface CustomerUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  address?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutCustomerInput>;
}

export interface ProductUpsertWithoutProductImagesInput {
  update: ProductUpdateWithoutProductImagesDataInput;
  create: ProductCreateWithoutProductImagesInput;
}

export interface UserUpdateOneRequiredWithoutCustomerInput {
  create?: Maybe<UserCreateWithoutCustomerInput>;
  update?: Maybe<UserUpdateWithoutCustomerDataInput>;
  upsert?: Maybe<UserUpsertWithoutCustomerInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ProductCreateManyWithoutCountryInput {
  create?: Maybe<
    ProductCreateWithoutCountryInput[] | ProductCreateWithoutCountryInput
  >;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
}

export interface UserUpdateWithoutCustomerDataInput {
  email?: Maybe<String>;
  phone?: Maybe<Int>;
  vendor?: Maybe<VendorUpdateOneWithoutUserInput>;
}

export interface UserCreateOneWithoutVendorInput {
  create?: Maybe<UserCreateWithoutVendorInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface VendorUpdateOneWithoutUserInput {
  create?: Maybe<VendorCreateWithoutUserInput>;
  update?: Maybe<VendorUpdateWithoutUserDataInput>;
  upsert?: Maybe<VendorUpsertWithoutUserInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<VendorWhereUniqueInput>;
}

export interface ProductImageCreateManyWithoutProductInput {
  create?: Maybe<
    | ProductImageCreateWithoutProductInput[]
    | ProductImageCreateWithoutProductInput
  >;
  connect?: Maybe<
    ProductImageWhereUniqueInput[] | ProductImageWhereUniqueInput
  >;
}

export interface VendorUpdateWithoutUserDataInput {
  displayName?: Maybe<String>;
  organizationNumber?: Maybe<Int>;
  bankAccount?: Maybe<String>;
  logoImage?: Maybe<String>;
  facebookPageURL?: Maybe<String>;
  address?: Maybe<String>;
  products?: Maybe<ProductUpdateManyWithoutVendorInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ProductUpdateManyWithoutVendorInput {
  create?: Maybe<
    ProductCreateWithoutVendorInput[] | ProductCreateWithoutVendorInput
  >;
  delete?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  set?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  disconnect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  update?: Maybe<
    | ProductUpdateWithWhereUniqueWithoutVendorInput[]
    | ProductUpdateWithWhereUniqueWithoutVendorInput
  >;
  upsert?: Maybe<
    | ProductUpsertWithWhereUniqueWithoutVendorInput[]
    | ProductUpsertWithWhereUniqueWithoutVendorInput
  >;
  deleteMany?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  updateMany?: Maybe<
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput
  >;
}

export interface VendorUpdateInput {
  displayName?: Maybe<String>;
  organizationNumber?: Maybe<Int>;
  bankAccount?: Maybe<String>;
  logoImage?: Maybe<String>;
  facebookPageURL?: Maybe<String>;
  address?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutVendorInput>;
  products?: Maybe<ProductUpdateManyWithoutVendorInput>;
}

export interface ProductUpdateWithWhereUniqueWithoutVendorInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutVendorDataInput;
}

export interface RegionUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ProductUpdateWithoutVendorDataInput {
  title?: Maybe<String>;
  flavorProfile?: Maybe<String>;
  description?: Maybe<String>;
  info?: Maybe<String>;
  published?: Maybe<Boolean>;
  country?: Maybe<CountryUpdateOneWithoutProductsInput>;
  productImages?: Maybe<ProductImageUpdateManyWithoutProductInput>;
}

export interface CountryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  region?: Maybe<RegionWhereInput>;
  products_every?: Maybe<ProductWhereInput>;
  products_some?: Maybe<ProductWhereInput>;
  products_none?: Maybe<ProductWhereInput>;
  AND?: Maybe<CountryWhereInput[] | CountryWhereInput>;
  OR?: Maybe<CountryWhereInput[] | CountryWhereInput>;
  NOT?: Maybe<CountryWhereInput[] | CountryWhereInput>;
}

export interface CountryUpdateOneWithoutProductsInput {
  create?: Maybe<CountryCreateWithoutProductsInput>;
  update?: Maybe<CountryUpdateWithoutProductsDataInput>;
  upsert?: Maybe<CountryUpsertWithoutProductsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CountryWhereUniqueInput>;
}

export interface ProductImageUpdateManyMutationInput {
  image?: Maybe<String>;
}

export interface CountryUpdateWithoutProductsDataInput {
  name?: Maybe<String>;
  region?: Maybe<RegionUpdateOneWithoutCountriesInput>;
}

export interface RegionCreateOneWithoutCountriesInput {
  create?: Maybe<RegionCreateWithoutCountriesInput>;
  connect?: Maybe<RegionWhereUniqueInput>;
}

export interface CountryUpsertWithoutProductsInput {
  update: CountryUpdateWithoutProductsDataInput;
  create: CountryCreateWithoutProductsInput;
}

export interface CustomerCreateOneWithoutUserInput {
  create?: Maybe<CustomerCreateWithoutUserInput>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface ProductUpsertWithWhereUniqueWithoutVendorInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutVendorDataInput;
  create: ProductCreateWithoutVendorInput;
}

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  flavorProfile?: Maybe<String>;
  flavorProfile_not?: Maybe<String>;
  flavorProfile_in?: Maybe<String[] | String>;
  flavorProfile_not_in?: Maybe<String[] | String>;
  flavorProfile_lt?: Maybe<String>;
  flavorProfile_lte?: Maybe<String>;
  flavorProfile_gt?: Maybe<String>;
  flavorProfile_gte?: Maybe<String>;
  flavorProfile_contains?: Maybe<String>;
  flavorProfile_not_contains?: Maybe<String>;
  flavorProfile_starts_with?: Maybe<String>;
  flavorProfile_not_starts_with?: Maybe<String>;
  flavorProfile_ends_with?: Maybe<String>;
  flavorProfile_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  info?: Maybe<String>;
  info_not?: Maybe<String>;
  info_in?: Maybe<String[] | String>;
  info_not_in?: Maybe<String[] | String>;
  info_lt?: Maybe<String>;
  info_lte?: Maybe<String>;
  info_gt?: Maybe<String>;
  info_gte?: Maybe<String>;
  info_contains?: Maybe<String>;
  info_not_contains?: Maybe<String>;
  info_starts_with?: Maybe<String>;
  info_not_starts_with?: Maybe<String>;
  info_ends_with?: Maybe<String>;
  info_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  vendor?: Maybe<VendorWhereInput>;
  country?: Maybe<CountryWhereInput>;
  productImages_every?: Maybe<ProductImageWhereInput>;
  productImages_some?: Maybe<ProductImageWhereInput>;
  productImages_none?: Maybe<ProductImageWhereInput>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface VendorUpsertWithoutUserInput {
  update: VendorUpdateWithoutUserDataInput;
  create: VendorCreateWithoutUserInput;
}

export interface CountryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<CountryScalarWhereInput[] | CountryScalarWhereInput>;
  OR?: Maybe<CountryScalarWhereInput[] | CountryScalarWhereInput>;
  NOT?: Maybe<CountryScalarWhereInput[] | CountryScalarWhereInput>;
}

export interface ProductUpdateInput {
  title?: Maybe<String>;
  flavorProfile?: Maybe<String>;
  description?: Maybe<String>;
  info?: Maybe<String>;
  published?: Maybe<Boolean>;
  vendor?: Maybe<VendorUpdateOneWithoutProductsInput>;
  country?: Maybe<CountryUpdateOneWithoutProductsInput>;
  productImages?: Maybe<ProductImageUpdateManyWithoutProductInput>;
}

export interface ProductCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  flavorProfile?: Maybe<String>;
  description: String;
  info?: Maybe<String>;
  published: Boolean;
  vendor?: Maybe<VendorCreateOneWithoutProductsInput>;
  country?: Maybe<CountryCreateOneWithoutProductsInput>;
  productImages?: Maybe<ProductImageCreateManyWithoutProductInput>;
}

export interface CustomerUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  address?: Maybe<String>;
}

export interface UserUpsertWithoutCustomerInput {
  update: UserUpdateWithoutCustomerDataInput;
  create: UserCreateWithoutCustomerInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  phone?: Maybe<Int>;
}>;

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  phone?: Maybe<Int>;
}

export interface CustomerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  OR?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  NOT?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
}

export interface VendorCreateOneWithoutProductsInput {
  create?: Maybe<VendorCreateWithoutProductsInput>;
  connect?: Maybe<VendorWhereUniqueInput>;
}

export interface ProductUpdateOneWithoutProductImagesInput {
  create?: Maybe<ProductCreateWithoutProductImagesInput>;
  update?: Maybe<ProductUpdateWithoutProductImagesDataInput>;
  upsert?: Maybe<ProductUpsertWithoutProductImagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VendorPreviousValues {
  id: ID_Output;
  displayName: String;
  organizationNumber: Int;
  bankAccount: String;
  logoImage: String;
  facebookPageURL?: String;
  address: String;
}

export interface VendorPreviousValuesPromise
  extends Promise<VendorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  displayName: () => Promise<String>;
  organizationNumber: () => Promise<Int>;
  bankAccount: () => Promise<String>;
  logoImage: () => Promise<String>;
  facebookPageURL: () => Promise<String>;
  address: () => Promise<String>;
}

export interface VendorPreviousValuesSubscription
  extends Promise<AsyncIterator<VendorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  displayName: () => Promise<AsyncIterator<String>>;
  organizationNumber: () => Promise<AsyncIterator<Int>>;
  bankAccount: () => Promise<AsyncIterator<String>>;
  logoImage: () => Promise<AsyncIterator<String>>;
  facebookPageURL: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
}

export interface CustomerConnection {
  pageInfo: PageInfo;
  edges: CustomerEdge[];
}

export interface CustomerConnectionPromise
  extends Promise<CustomerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerEdge>>() => T;
  aggregate: <T = AggregateCustomerPromise>() => T;
}

export interface CustomerConnectionSubscription
  extends Promise<AsyncIterator<CustomerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateCountry {
  count: Int;
}

export interface AggregateCountryPromise
  extends Promise<AggregateCountry>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCountrySubscription
  extends Promise<AsyncIterator<AggregateCountry>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CountryEdge {
  node: Country;
  cursor: String;
}

export interface CountryEdgePromise extends Promise<CountryEdge>, Fragmentable {
  node: <T = CountryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CountryEdgeSubscription
  extends Promise<AsyncIterator<CountryEdge>>,
    Fragmentable {
  node: <T = CountrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateVendor {
  count: Int;
}

export interface AggregateVendorPromise
  extends Promise<AggregateVendor>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVendorSubscription
  extends Promise<AsyncIterator<AggregateVendor>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface VendorConnection {
  pageInfo: PageInfo;
  edges: VendorEdge[];
}

export interface VendorConnectionPromise
  extends Promise<VendorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VendorEdge>>() => T;
  aggregate: <T = AggregateVendorPromise>() => T;
}

export interface VendorConnectionSubscription
  extends Promise<AsyncIterator<VendorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VendorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVendorSubscription>() => T;
}

export interface CountryConnection {
  pageInfo: PageInfo;
  edges: CountryEdge[];
}

export interface CountryConnectionPromise
  extends Promise<CountryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CountryEdge>>() => T;
  aggregate: <T = AggregateCountryPromise>() => T;
}

export interface CountryConnectionSubscription
  extends Promise<AsyncIterator<CountryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CountryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCountrySubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  phone?: Int;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  phone: () => Promise<Int>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface CountrySubscriptionPayload {
  mutation: MutationType;
  node: Country;
  updatedFields: String[];
  previousValues: CountryPreviousValues;
}

export interface CountrySubscriptionPayloadPromise
  extends Promise<CountrySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CountryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CountryPreviousValuesPromise>() => T;
}

export interface CountrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CountrySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CountrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CountryPreviousValuesSubscription>() => T;
}

export interface AggregateRegion {
  count: Int;
}

export interface AggregateRegionPromise
  extends Promise<AggregateRegion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRegionSubscription
  extends Promise<AsyncIterator<AggregateRegion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CountryPreviousValues {
  id: ID_Output;
  name: String;
}

export interface CountryPreviousValuesPromise
  extends Promise<CountryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CountryPreviousValuesSubscription
  extends Promise<AsyncIterator<CountryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface RegionConnection {
  pageInfo: PageInfo;
  edges: RegionEdge[];
}

export interface RegionConnectionPromise
  extends Promise<RegionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RegionEdge>>() => T;
  aggregate: <T = AggregateRegionPromise>() => T;
}

export interface RegionConnectionSubscription
  extends Promise<AsyncIterator<RegionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RegionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRegionSubscription>() => T;
}

export interface ProductImage {
  id: ID_Output;
  image: String;
}

export interface ProductImagePromise
  extends Promise<ProductImage>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  image: () => Promise<String>;
  product: <T = ProductPromise>() => T;
}

export interface ProductImageSubscription
  extends Promise<AsyncIterator<ProductImage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  image: () => Promise<AsyncIterator<String>>;
  product: <T = ProductSubscription>() => T;
}

export interface ProductImageNullablePromise
  extends Promise<ProductImage | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  image: () => Promise<String>;
  product: <T = ProductPromise>() => T;
}

export interface ProductImageEdge {
  node: ProductImage;
  cursor: String;
}

export interface ProductImageEdgePromise
  extends Promise<ProductImageEdge>,
    Fragmentable {
  node: <T = ProductImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductImageEdgeSubscription
  extends Promise<AsyncIterator<ProductImageEdge>>,
    Fragmentable {
  node: <T = ProductImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CustomerSubscriptionPayload {
  mutation: MutationType;
  node: Customer;
  updatedFields: String[];
  previousValues: CustomerPreviousValues;
}

export interface CustomerSubscriptionPayloadPromise
  extends Promise<CustomerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomerPreviousValuesPromise>() => T;
}

export interface CustomerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomerPreviousValuesSubscription>() => T;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CustomerPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  address: String;
}

export interface CustomerPreviousValuesPromise
  extends Promise<CustomerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  address: () => Promise<String>;
}

export interface CustomerPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface Customer {
  id: ID_Output;
  firstName: String;
  lastName: String;
  address: String;
}

export interface CustomerPromise extends Promise<Customer>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  address: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface CustomerSubscription
  extends Promise<AsyncIterator<Customer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface CustomerNullablePromise
  extends Promise<Customer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  address: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface CustomerEdge {
  node: Customer;
  cursor: String;
}

export interface CustomerEdgePromise
  extends Promise<CustomerEdge>,
    Fragmentable {
  node: <T = CustomerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerEdgeSubscription
  extends Promise<AsyncIterator<CustomerEdge>>,
    Fragmentable {
  node: <T = CustomerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface VendorEdge {
  node: Vendor;
  cursor: String;
}

export interface VendorEdgePromise extends Promise<VendorEdge>, Fragmentable {
  node: <T = VendorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VendorEdgeSubscription
  extends Promise<AsyncIterator<VendorEdge>>,
    Fragmentable {
  node: <T = VendorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductPreviousValues {
  id: ID_Output;
  title: String;
  flavorProfile?: String;
  description: String;
  info?: String;
  published: Boolean;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  flavorProfile: () => Promise<String>;
  description: () => Promise<String>;
  info: () => Promise<String>;
  published: () => Promise<Boolean>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  flavorProfile: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  info: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  email: String;
  phone?: Int;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  phone: () => Promise<Int>;
  customer: <T = CustomerPromise>() => T;
  vendor: <T = VendorPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<Int>>;
  customer: <T = CustomerSubscription>() => T;
  vendor: <T = VendorSubscription>() => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  phone: () => Promise<Int>;
  customer: <T = CustomerPromise>() => T;
  vendor: <T = VendorPromise>() => T;
}

export interface RegionEdge {
  node: Region;
  cursor: String;
}

export interface RegionEdgePromise extends Promise<RegionEdge>, Fragmentable {
  node: <T = RegionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RegionEdgeSubscription
  extends Promise<AsyncIterator<RegionEdge>>,
    Fragmentable {
  node: <T = RegionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductImageSubscriptionPayload {
  mutation: MutationType;
  node: ProductImage;
  updatedFields: String[];
  previousValues: ProductImagePreviousValues;
}

export interface ProductImageSubscriptionPayloadPromise
  extends Promise<ProductImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductImagePreviousValuesPromise>() => T;
}

export interface ProductImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductImagePreviousValuesSubscription>() => T;
}

export interface ProductImageConnection {
  pageInfo: PageInfo;
  edges: ProductImageEdge[];
}

export interface ProductImageConnectionPromise
  extends Promise<ProductImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductImageEdge>>() => T;
  aggregate: <T = AggregateProductImagePromise>() => T;
}

export interface ProductImageConnectionSubscription
  extends Promise<AsyncIterator<ProductImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductImageSubscription>() => T;
}

export interface ProductImagePreviousValues {
  id: ID_Output;
  image: String;
}

export interface ProductImagePreviousValuesPromise
  extends Promise<ProductImagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  image: () => Promise<String>;
}

export interface ProductImagePreviousValuesSubscription
  extends Promise<AsyncIterator<ProductImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  image: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCustomer {
  count: Int;
}

export interface AggregateCustomerPromise
  extends Promise<AggregateCustomer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerSubscription
  extends Promise<AsyncIterator<AggregateCustomer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Country {
  id: ID_Output;
  name: String;
}

export interface CountryPromise extends Promise<Country>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  region: <T = RegionPromise>() => T;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CountrySubscription
  extends Promise<AsyncIterator<Country>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  region: <T = RegionSubscription>() => T;
  products: <T = Promise<AsyncIterator<ProductSubscription>>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CountryNullablePromise
  extends Promise<Country | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  region: <T = RegionPromise>() => T;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Product {
  id: ID_Output;
  title: String;
  flavorProfile?: String;
  description: String;
  info?: String;
  published: Boolean;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  flavorProfile: () => Promise<String>;
  description: () => Promise<String>;
  info: () => Promise<String>;
  published: () => Promise<Boolean>;
  vendor: <T = VendorPromise>() => T;
  country: <T = CountryPromise>() => T;
  productImages: <T = FragmentableArray<ProductImage>>(args?: {
    where?: ProductImageWhereInput;
    orderBy?: ProductImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  flavorProfile: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  info: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  vendor: <T = VendorSubscription>() => T;
  country: <T = CountrySubscription>() => T;
  productImages: <T = Promise<AsyncIterator<ProductImageSubscription>>>(args?: {
    where?: ProductImageWhereInput;
    orderBy?: ProductImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  flavorProfile: () => Promise<String>;
  description: () => Promise<String>;
  info: () => Promise<String>;
  published: () => Promise<Boolean>;
  vendor: <T = VendorPromise>() => T;
  country: <T = CountryPromise>() => T;
  productImages: <T = FragmentableArray<ProductImage>>(args?: {
    where?: ProductImageWhereInput;
    orderBy?: ProductImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RegionPreviousValues {
  id: ID_Output;
  name: String;
}

export interface RegionPreviousValuesPromise
  extends Promise<RegionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface RegionPreviousValuesSubscription
  extends Promise<AsyncIterator<RegionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface RegionSubscriptionPayload {
  mutation: MutationType;
  node: Region;
  updatedFields: String[];
  previousValues: RegionPreviousValues;
}

export interface RegionSubscriptionPayloadPromise
  extends Promise<RegionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RegionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RegionPreviousValuesPromise>() => T;
}

export interface RegionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RegionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RegionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RegionPreviousValuesSubscription>() => T;
}

export interface Vendor {
  id: ID_Output;
  displayName: String;
  organizationNumber: Int;
  bankAccount: String;
  logoImage: String;
  facebookPageURL?: String;
  address: String;
}

export interface VendorPromise extends Promise<Vendor>, Fragmentable {
  id: () => Promise<ID_Output>;
  displayName: () => Promise<String>;
  organizationNumber: () => Promise<Int>;
  bankAccount: () => Promise<String>;
  logoImage: () => Promise<String>;
  facebookPageURL: () => Promise<String>;
  address: () => Promise<String>;
  user: <T = UserPromise>() => T;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface VendorSubscription
  extends Promise<AsyncIterator<Vendor>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  displayName: () => Promise<AsyncIterator<String>>;
  organizationNumber: () => Promise<AsyncIterator<Int>>;
  bankAccount: () => Promise<AsyncIterator<String>>;
  logoImage: () => Promise<AsyncIterator<String>>;
  facebookPageURL: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  products: <T = Promise<AsyncIterator<ProductSubscription>>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface VendorNullablePromise
  extends Promise<Vendor | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  displayName: () => Promise<String>;
  organizationNumber: () => Promise<Int>;
  bankAccount: () => Promise<String>;
  logoImage: () => Promise<String>;
  facebookPageURL: () => Promise<String>;
  address: () => Promise<String>;
  user: <T = UserPromise>() => T;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Region {
  id: ID_Output;
  name: String;
}

export interface RegionPromise extends Promise<Region>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  countries: <T = FragmentableArray<Country>>(args?: {
    where?: CountryWhereInput;
    orderBy?: CountryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RegionSubscription
  extends Promise<AsyncIterator<Region>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  countries: <T = Promise<AsyncIterator<CountrySubscription>>>(args?: {
    where?: CountryWhereInput;
    orderBy?: CountryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RegionNullablePromise
  extends Promise<Region | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  countries: <T = FragmentableArray<Country>>(args?: {
    where?: CountryWhereInput;
    orderBy?: CountryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface VendorSubscriptionPayload {
  mutation: MutationType;
  node: Vendor;
  updatedFields: String[];
  previousValues: VendorPreviousValues;
}

export interface VendorSubscriptionPayloadPromise
  extends Promise<VendorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VendorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VendorPreviousValuesPromise>() => T;
}

export interface VendorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VendorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VendorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VendorPreviousValuesSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProductImage {
  count: Int;
}

export interface AggregateProductImagePromise
  extends Promise<AggregateProductImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductImageSubscription
  extends Promise<AsyncIterator<AggregateProductImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Customer",
    embedded: false
  },
  {
    name: "Vendor",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "ProductImage",
    embedded: false
  },
  {
    name: "Country",
    embedded: false
  },
  {
    name: "Region",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
